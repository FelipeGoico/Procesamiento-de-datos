from app import st, df
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from pathlib import Path
import networkx as nx
import plotly.graph_objects as go
import plotly.express as px



# ===========================
# Estilo CSS personalizado
# ===========================
st.markdown("""
<style>
table {
    width: 100%;
    border-collapse: collapse;
    margin: 12px 0;
    font-size: 15px;
    font-family: 'Segoe UI', sans-serif;
}
th {
    background-color: #1f4e79;
    color: white;
    text-align: center;
    padding: 8px;
    border: 1px solid #ddd;
}
td {
    background-color: #f9f9f9;
    text-align: left;
    padding: 8px;
    border: 1px solid #ddd;
}
tr:nth-child(even) td {
    background-color: #f1f1f1;
}
</style>
""", unsafe_allow_html=True)




BASE_DIR = Path(__file__).resolve().parent.parent.parent  # sube desde pages -> app -> Procesamiento-de-datos
IMG_DIR = BASE_DIR / "img"
IMAGE_PATH_00 = IMG_DIR / "fvets-12-1630083-g000.jpg"



# ===========================
# Configuraci√≥n p√°gina
# ===========================
st.set_page_config(
    page_title="EDA - Dataset db-cow-walking-IoT",
    page_icon=":mag:",
    layout="wide"
)

# ===========================
# Banner
# ===========================
st.markdown("""
<div style="background-color:#1f4e79; padding: 18px; border-radius: 10px; text-align:center; color: white;">
    <h1 style="margin:0;">üîç An√°lisis Exploratorio de Datos (EDA)</h1>
    <p style="margin:0; font-size:18px;">Dataset <i>db-cow-walking-IoT</i></p>
</div>
""", unsafe_allow_html=True)


# ===========================
# Introducci√≥n con continuidad
# ===========================
st.markdown("""
<div style="text-align: justify; margin-top: 20px;">
El presente An√°lisis Exploratorio de Datos (EDA) se basa en el dataset original 
<b>db-cow-walking-IoT</b>, que recoge informaci√≥n de sensores inerciales (IMU) y GPS en vacas lecheras de pastoreo.  
Este conjunto de datos ha permitido identificar y clasificar comportamientos como caminar, pastorear o descansar.  

Dando continuidad al proyecto anterior, utilizaremos este EDA como <b>punto de partida</b> para profundizar en nuevas l√≠neas de investigaci√≥n.  
Nuestro objetivo es ampliar la detecci√≥n hacia <b>comportamientos an√≥malos</b>, como espasmos o sacudidas vinculadas a la presencia de moscas, en especial en zonas del lomo y los cuernos.  
La incorporaci√≥n de estas nuevas variables derivadas no solo enriquecer√° el dataset, sino que tambi√©n abrir√° la posibilidad de <b>automatizar la detecci√≥n temprana</b> de posibles problemas de salud animal, mejorando as√≠ la gesti√≥n en la ganader√≠a moderna.  
</div>
""", unsafe_allow_html=True)


# ===========================
# Secci√≥n: Tratamiento de la Data
# ===========================
st.markdown("""
## ‚öôÔ∏è Tratamiento y Preparaci√≥n de los Datos

<div style="text-align: justify;">
Los datos originales se encontraban organizados en m√∫ltiples carpetas, donde cada una representaba un comportamiento distinto 
(caminata, pastoreo, reposo, entre otros). Cada carpeta conten√≠a varios archivos <code>.csv</code> con registros capturados 
desde los sensores <b>MPU9250</b> y <b>BNO055</b>.  

Para unificar y estructurar esta informaci√≥n, se dise√±√≥ un <b>m√©todo adaptable</b> que permite:  

1. Recorrer autom√°ticamente todas las carpetas y archivos.  
2. Incorporar una columna <code>label</code> con el nombre de la carpeta (comportamiento observado).  
3. Calcular magnitudes derivadas de aceleraci√≥n y giroscopio.  
4. Generar estad√≠sticas de ventana temporal (rolling window) para capturar variaciones din√°micas.  
5. Crear indicadores de alerta como <i>inquietud alta</i> o <i>actividad extrema</i>.  

Este enfoque permiti√≥ transformar un conjunto de archivos dispersos en un dataset unificado, consistente y listo para el an√°lisis exploratorio.  
</div>
""", unsafe_allow_html=True)


# ===========================
# Mostrar c√≥digo usado (colapsable)
# ===========================
with st.expander("üìú Ver c√≥digo usado en el tratamiento de los datos"):
    st.code("""
import os
import pandas as pd 
import numpy as np

def load_data_from_folders(base_path):
    df_list = []
    for root, dirs, files in os.walk(base_path):
        for file in files:
            if file.endswith('.csv'):
                file_path = os.path.join(root, file)
                folder_name = os.path.basename(root)
                df = pd.read_csv(file_path)
                df['label'] = folder_name
                df_list.append(df)
    df_full = pd.concat(df_list, ignore_index=True)
    return df_full

df_full = load_data_from_folders('C:/ruta/base/db-cow-walking-IoT')
df = df_full.copy()

# Magnitudes de sensores
df['BNO055_acc_magnitude'] = np.sqrt(df['BNO055_AX']**2 + df['BNO055_AY']**2 + df['BNO055_AZ']**2)
df['BNO055_gyro_magnitude'] = np.sqrt(df['BNO055_GX']**2 + df['BNO055_GY']**2 + df['BNO055_GZ']**2)
df['MPU9250_acc_magnitude'] = np.sqrt(df['MPU9250_AX']**2 + df['MPU9250_AY']**2 + df['MPU9250_AZ']**2)
df['MPU9250_gyro_magnitude'] = np.sqrt(df['MPU9250_GX']**2 + df['MPU9250_GY']**2 + df['MPU9250_GZ']**2)

# Estad√≠sticas por ventana
window_size = 5
df['acc_mean_window5'] = df['BNO055_acc_magnitude'].rolling(window_size).mean()
df['acc_std_window5'] = df['BNO055_acc_magnitude'].rolling(window_size).std()
df['gyro_mean_window5'] = df['BNO055_gyro_magnitude'].rolling(window_size).mean()
df['gyro_std_window5'] = df['BNO055_gyro_magnitude'].rolling(window_size).std()

# Indicadores de alerta
df['inquietud_alta'] = (
    (df['label'] == 'Resting') & 
    (df['BNO055_gyro_magnitude'] > df['BNO055_gyro_magnitude'].quantile(0.95))
).astype(int)

df['actividad_extrema'] = (
    df['BNO055_acc_magnitude'] > df['BNO055_acc_magnitude'].quantile(0.95)
).astype(int)
    """, language="python")


st.image(str(IMAGE_PATH_00), caption="Estructura de carpetas y archivos del dataset original", use_container_width=True)

# ===========================
# Dataset y variables
# ===========================
st.markdown("""
## üìä Tipos de Variables en el Dataset
El dataset contiene tanto variables num√©ricas como categ√≥ricas que permiten representar el comportamiento de las vacas.
""")


# ===========================
# Secci√≥n descriptiva
# ===========================
st.markdown("## üìë Descripci√≥n de las Variables")
st.markdown("""
Esta secci√≥n presenta una descripci√≥n detallada de las variables contenidas en el dataset
**db-cow-walking-IoT**, clasificadas seg√∫n su origen y naturaleza.
Se busca mantener una presentaci√≥n clara, concisa y profesional para apoyar la investigaci√≥n.
""")

# ===========================
# Variables de Tiempo
# ===========================
with st.expander("üïí Variables de Tiempo", expanded=True):
    st.markdown("""
| Nombre | Descripci√≥n | Tipo de dato | Unidad |
| :--- | :--- | :--- | :--- |
| **Time** | Timestamp que indica el momento de registro de la muestra. | Num√©rica Continua | timestamp |
""")

# ===========================
# Variables del Sensor BNO055
# ===========================
with st.expander("üì° Variables del Sensor BNO055"):
    st.markdown("""
| Nombre | Descripci√≥n | Tipo de dato | Unidad |
| :--- | :--- | :--- | :--- |
| **BNO055_ARX** | Tasa de rotaci√≥n absoluta eje X. | Num√©rica Continua | ¬∞/s o rad/s |
| **BNO055_ARY** | Tasa de rotaci√≥n absoluta eje Y. | Num√©rica Continua | ¬∞/s o rad/s |
| **BNO055_ARZ** | Tasa de rotaci√≥n absoluta eje Z. | Num√©rica Continua | ¬∞/s o rad/s |
| **BNO055_AX** | Aceleraci√≥n lineal eje X. | Num√©rica Continua | m/s¬≤ |
| **BNO055_AY** | Aceleraci√≥n lineal eje Y. | Num√©rica Continua | m/s¬≤ |
| **BNO055_AZ** | Aceleraci√≥n lineal eje Z. | Num√©rica Continua | m/s¬≤ |
| **BNO055_GX** | Velocidad angular eje X. | Num√©rica Continua | ¬∞/s |
| **BNO055_GY** | Velocidad angular eje Y. | Num√©rica Continua | ¬∞/s |
| **BNO055_GZ** | Velocidad angular eje Z. | Num√©rica Continua | ¬∞/s |
| **BNO055_MX** | Campo magn√©tico eje X. | Num√©rica Continua | ¬µT |
| **BNO055_MY** | Campo magn√©tico eje Y. | Num√©rica Continua | ¬µT |
| **BNO055_MZ** | Campo magn√©tico eje Z. | Num√©rica Continua | ¬µT |
| **BNO055_Q0** | Componente escalar (w) del cuaterni√≥n. | Num√©rica Continua | ‚Äî |
| **BNO055_Q1** | Componente X (i) del cuaterni√≥n. | Num√©rica Continua | ‚Äî |
| **BNO055_Q2** | Componente Y (j) del cuaterni√≥n. | Num√©rica Continua | ‚Äî |
| **BNO055_Q3** | Componente Z (k) del cuaterni√≥n. | Num√©rica Continua | ‚Äî |
""")

# ===========================
# Variables del Sensor MPU9250
# ===========================
with st.expander("‚öôÔ∏è Variables del Sensor MPU9250"):
    st.markdown("""
| Nombre | Descripci√≥n | Tipo de dato | Unidad |
| :--- | :--- | :--- | :--- |
| **MPU9250_AX** | Aceleraci√≥n lineal eje X. | Num√©rica Continua | m/s¬≤ |
| **MPU9250_AY** | Aceleraci√≥n lineal eje Y. | Num√©rica Continua | m/s¬≤ |
| **MPU9250_AZ** | Aceleraci√≥n lineal eje Z. | Num√©rica Continua | m/s¬≤ |
| **MPU9250_GX** | Velocidad angular eje X. | Num√©rica Continua | ¬∞/s |
| **MPU9250_GY** | Velocidad angular eje Y. | Num√©rica Continua | ¬∞/s |
| **MPU9250_GZ** | Velocidad angular eje Z. | Num√©rica Continua | ¬∞/s |
| **MPU9250_MX** | Campo magn√©tico eje X. | Num√©rica Continua | ¬µT |
| **MPU9250_MY** | Campo magn√©tico eje Y. | Num√©rica Continua | ¬µT |
| **MPU9250_MZ** | Campo magn√©tico eje Z. | Num√©rica Continua | ¬µT |
""")

# ===========================
# Variables Derivadas
# ===========================
with st.expander("üßÆ Variables Derivadas"):
    st.markdown("""
| Nombre | Descripci√≥n | Tipo de dato | Unidad |
| :--- | :--- | :--- | :--- |
| **BNO055_acc_magnitude** | Magnitud de la aceleraci√≥n BNO055. | Num√©rica Continua | m/s¬≤ |
| **BNO055_gyro_magnitude** | Magnitud del giroscopio BNO055. | Num√©rica Continua | ¬∞/s |
| **MPU9250_acc_magnitude** | Magnitud de la aceleraci√≥n MPU9250. | Num√©rica Continua | m/s¬≤ |
| **MPU9250_gyro_magnitude** | Magnitud del giroscopio MPU9250. | Num√©rica Continua | ¬∞/s |
| **acc_mean_window5** | Media de aceleraci√≥n en ventana de 5. | Num√©rica Continua | m/s¬≤ |
| **acc_std_window5** | Desviaci√≥n est√°ndar de aceleraci√≥n en ventana de 5. | Num√©rica Continua | m/s¬≤ |
| **gyro_mean_window5** | Media del giroscopio en ventana de 5. | Num√©rica Continua | ¬∞/s |
| **gyro_std_window5** | Desviaci√≥n est√°ndar del giroscopio en ventana de 5. | Num√©rica Continua | ¬∞/s |
""")

# ===========================
# Variables de Etiqueta
# ===========================
with st.expander("üè∑Ô∏è Variables de Etiqueta"):
    st.markdown("""
| Nombre | Descripci√≥n | Tipo de dato | Unidad |
| :--- | :--- | :--- | :--- |
| **label** | Clase categ√≥rica del comportamiento observado. | Categ√≥rica | ‚Äî |
| **inquietud_alta** | Indicador binario de alta inquietud. | Categ√≥rica | 0 / 1 |
| **actividad_extrema** | Indicador binario de actividad extrema. | Categ√≥rica | 0 / 1 |
""")



# ===========================
# Estad√≠sticas y collage de histogramas
# ===========================
col_numericas = df.select_dtypes(include=[np.number]).columns.drop('label', errors='ignore')

st.markdown("### üìà Estad√≠sticas Descriptivas de Variables Num√©ricas")

# Tabla transpuesta limpia
desc_df = df[col_numericas].describe().T
desc_df = desc_df[['count', 'mean', 'std', 'min', '25%', '50%', '75%', 'max']]
desc_df = desc_df.round(2)
st.dataframe(desc_df, use_container_width=True)


# ===========================
# Collage de histogramas
# ===========================
st.markdown("### üìä Distribuci√≥n de Variables Num√©ricas por columna")

# Configurar grid de subplots
n_cols = 3  # columnas en el collage
n_rows = int(np.ceil(len(col_numericas)/n_cols))
fig, axes = plt.subplots(n_rows, n_cols, figsize=(n_cols*4, n_rows*3))
axes = axes.flatten()

for i, col in enumerate(col_numericas):
    sns.histplot(df[col], bins=30, kde=True, color='#1f4e79', ax=axes[i])
    axes[i].set_title(col)
    axes[i].set_xlabel('')
    axes[i].set_ylabel('')

# Quitar ejes vac√≠os si los hay
for j in range(i+1, len(axes)):
    fig.delaxes(axes[j])

plt.tight_layout()
st.pyplot(fig)

st.markdown("### üìä Mapa de Correlaci√≥n de Variables Num√©ricas por columna")

# Seleccionar variables num√©ricas
col_numericas = df.select_dtypes(include=[np.number]).columns.drop('label', errors='ignore')

# Calcular matriz de correlaci√≥n
corr_matrix = df[col_numericas].corr()

# Triangular inferior: ponemos NaN en la parte superior
mask = np.triu(np.ones_like(corr_matrix, dtype=bool))
corr_masked = corr_matrix.mask(mask)

# Crear heatmap interactivo con Plotly
fig = px.imshow(
    corr_masked,
    text_auto='.2f',       # mostrar valores en cada celda
    aspect="auto",
    color_continuous_scale='RdBu_r',
    origin='upper'
)

# Reducir tama√±o de texto dentro de los cuadros
fig.update_traces(textfont_size=10)  # ajusta seg√∫n convenga, 10 es ~40% m√°s peque√±o que el default

# Mejorar layout
fig.update_layout(
    title='Mapa de Correlaci√≥n de Variables Num√©ricas (Triangular Inferior)',
    xaxis_title='Variables',
    yaxis_title='Variables',
    xaxis_tickangle=-45,
    width=900,
    height=900
)

st.plotly_chart(fig, use_container_width=True)


# ==========================================================
# Gr√°fico de Correlaci√≥n de Red (Alternativa profesional)
# ==========================================================


st.markdown("### üï∏Ô∏è Grafo de Correlaci√≥n de Variables")

st.markdown("""
<div style="text-align: justify; margin-top: 10px;">
Esta visualizaci√≥n presenta las correlaciones m√°s fuertes como una red, donde cada nodo es una variable. 
Una l√≠nea (arista) entre dos nodos indica una correlaci√≥n significativa (positiva o negativa). Esto reduce la 
saturaci√≥n visual y ayuda a identificar r√°pidamente las relaciones clave.
<br><br>
<b><span style="color:#FF0000;">Rojo:</span></b> Correlaci√≥n positiva fuerte | <b><span style="color:#0000FF;">Azul:</span></b> Correlaci√≥n negativa fuerte
</div>
""", unsafe_allow_html=True)


# Seleccionar variables num√©ricas
# Tu c√≥digo ya tiene esta l√≠nea
col_numericas = df.select_dtypes(include=[np.number]).columns.drop('label', errors='ignore')

# Calcular matriz de correlaci√≥n
corr_matrix = df[col_numericas].corr()

# --- Configuraci√≥n del umbral para el grafo ---
# AJUSTA ESTE VALOR: Define la fuerza m√≠nima de una correlaci√≥n para que sea mostrada.
threshold = 0.6  # Un valor m√°s alto reduce la cantidad de l√≠neas

# --- Preparar los datos para el grafo ---
edges = []
for i in range(len(corr_matrix.columns)):
    for j in range(i + 1, len(corr_matrix.columns)):
        var1 = corr_matrix.columns[i]
        var2 = corr_matrix.columns[j]
        corr_value = corr_matrix.iloc[i, j]
        if abs(corr_value) > threshold:
            edges.append((var1, var2, {'correlation': corr_value}))

# --- Crear el grafo con NetworkX ---
G = nx.Graph()
G.add_nodes_from(corr_matrix.columns)
G.add_edges_from(edges)
pos = nx.spring_layout(G, k=0.5, iterations=50)

# --- Crear la visualizaci√≥n con Plotly ---
# Trazos para las aristas (l√≠neas)
pos_edges_x, pos_edges_y, neg_edges_x, neg_edges_y = [], [], [], []

for edge in G.edges():
    x0, y0 = pos[edge[0]]
    x1, y1 = pos[edge[1]]
    corr = G.get_edge_data(edge[0], edge[1])['correlation']
    if corr > 0:
        pos_edges_x.extend([x0, x1, None])
        pos_edges_y.extend([y0, y1, None])
    else:
        neg_edges_x.extend([x0, x1, None])
        neg_edges_y.extend([y0, y1, None])

# Trazo para correlaciones positivas (rojo)
pos_edge_trace = go.Scatter(
    x=pos_edges_x, y=pos_edges_y,
    line=dict(width=1.5, color='rgba(255, 0, 0, 0.7)'),
    mode='lines',
    hoverinfo='none',
    name='Correlaci√≥n Positiva'
)

# Trazo para correlaciones negativas (azul)
neg_edge_trace = go.Scatter(
    x=neg_edges_x, y=neg_edges_y,
    line=dict(width=1.5, color='rgba(0, 0, 255, 0.7)'),
    mode='lines',
    hoverinfo='none',
    name='Correlaci√≥n Negativa'
)

# Trazos para los nodos (variables)
node_x = [pos[node][0] for node in G.nodes()]
node_y = [pos[node][1] for node in G.nodes()]
node_trace = go.Scatter(
    x=node_x, y=node_y,
    mode='markers+text',
    text=[node for node in G.nodes()],
    hoverinfo='text',
    textposition='top center',
    marker=dict(
        size=15,
        color='LightSkyBlue',
        line=dict(color='black', width=1)
    ),
    name='Variables'
)

# --- Tooltips corregidos ---
node_text = []
for node, neighbors in G.adjacency():
    correlations = []
    for neighbor in neighbors:
        corr_val = G.get_edge_data(node, neighbor)['correlation']
        correlations.append(f"{neighbor}: {corr_val:.2f}")
    hover_text = f"<b>{node}</b><br>Correlaciones fuertes:<br>" + "<br>".join(correlations)
    node_text.append(hover_text)
node_trace.text = node_text

# --- Layout corregido ---
fig = go.Figure(
    data=[pos_edge_trace, neg_edge_trace, node_trace],
    layout=go.Layout(
        title=dict(
            text='<br>Grafo de Correlaci√≥n de Variables',
            font=dict(size=16)
        ),
        showlegend=True,
        hovermode='closest',
        margin=dict(b=20, l=5, r=5, t=40),
        xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
        yaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
        annotations=[
            dict(
                text=f"<b>Un nodo</b> es una variable. <b>Una l√≠nea</b> indica una correlaci√≥n fuerte (> {threshold} o < -{threshold}).",
                showarrow=False,
                xref="paper",
                yref="paper",
                x=0.005,
                y=-0.002,
                align="left",
                font=dict(size=12)
            )
        ]
    )
)

st.plotly_chart(fig, use_container_width=True)